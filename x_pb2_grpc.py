# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import x_pb2 as x__pb2

GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in x_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class XServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterUser = channel.unary_unary(
                '/x.XService/RegisterUser',
                request_serializer=x__pb2.RegisterUserRequest.SerializeToString,
                response_deserializer=x__pb2.RegisterUserResponse.FromString,
                _registered_method=True)
        self.LoginUser = channel.unary_unary(
                '/x.XService/LoginUser',
                request_serializer=x__pb2.LoginUserRequest.SerializeToString,
                response_deserializer=x__pb2.LoginUserResponse.FromString,
                _registered_method=True)
        self.SendMessage = channel.unary_unary(
                '/x.XService/SendMessage',
                request_serializer=x__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=x__pb2.SendMessageResponse.FromString,
                _registered_method=True)
        self.GetMessages = channel.unary_unary(
                '/x.XService/GetMessages',
                request_serializer=x__pb2.GetMessagesRequest.SerializeToString,
                response_deserializer=x__pb2.GetMessagesResponse.FromString,
                _registered_method=True)
        self.GetLastMessages = channel.unary_unary(
                '/x.XService/GetLastMessages',
                request_serializer=x__pb2.LastMessagesRequest.SerializeToString,
                response_deserializer=x__pb2.LastMessagesResponse.FromString,
                _registered_method=True)
        self.LikeMessage = channel.unary_unary(
                '/x.XService/LikeMessage',
                request_serializer=x__pb2.LikeMessageRequest.SerializeToString,
                response_deserializer=x__pb2.LikeMessageResponse.FromString,
                _registered_method=True)
        self.CommentMessage = channel.unary_unary(
                '/x.XService/CommentMessage',
                request_serializer=x__pb2.CommentMessageRequest.SerializeToString,
                response_deserializer=x__pb2.CommentMessageResponse.FromString,
                _registered_method=True)
        self.FollowUser = channel.unary_unary(
                '/x.XService/FollowUser',
                request_serializer=x__pb2.FollowUserRequest.SerializeToString,
                response_deserializer=x__pb2.FollowUserResponse.FromString,
                _registered_method=True)
        self.GetUserId = channel.unary_unary(
                '/x.XService/GetUserId',
                request_serializer=x__pb2.GetUserIdRequest.SerializeToString,
                response_deserializer=x__pb2.GetUserIdResponse.FromString,
                _registered_method=True)
        self.EditMessage = channel.unary_unary(
                '/x.XService/EditMessage',
                request_serializer=x__pb2.EditMessageRequest.SerializeToString,
                response_deserializer=x__pb2.EditMessageResponse.FromString,
                _registered_method=True)
        self.DeleteMessage = channel.unary_unary(
                '/x.XService/DeleteMessage',
                request_serializer=x__pb2.DeleteMessageRequest.SerializeToString,
                response_deserializer=x__pb2.DeleteMessageResponse.FromString,
                _registered_method=True)
        self.DeleteAccount = channel.unary_unary(
                '/x.XService/DeleteAccount',
                request_serializer=x__pb2.DeleteAccountRequest.SerializeToString,
                response_deserializer=x__pb2.DeleteAccountResponse.FromString,
                _registered_method=True)
        self.ChangePassword = channel.unary_unary(
                '/x.XService/ChangePassword',
                request_serializer=x__pb2.ChangePasswordRequest.SerializeToString,
                response_deserializer=x__pb2.ChangePasswordResponse.FromString,
                _registered_method=True)


class XServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoginUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLastMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LikeMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommentMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FollowUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangePassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_XServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=x__pb2.RegisterUserRequest.FromString,
                    response_serializer=x__pb2.RegisterUserResponse.SerializeToString,
            ),
            'LoginUser': grpc.unary_unary_rpc_method_handler(
                    servicer.LoginUser,
                    request_deserializer=x__pb2.LoginUserRequest.FromString,
                    response_serializer=x__pb2.LoginUserResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=x__pb2.SendMessageRequest.FromString,
                    response_serializer=x__pb2.SendMessageResponse.SerializeToString,
            ),
            'GetMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMessages,
                    request_deserializer=x__pb2.GetMessagesRequest.FromString,
                    response_serializer=x__pb2.GetMessagesResponse.SerializeToString,
            ),
            'GetLastMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLastMessages,
                    request_deserializer=x__pb2.LastMessagesRequest.FromString,
                    response_serializer=x__pb2.LastMessagesResponse.SerializeToString,
            ),
            'LikeMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.LikeMessage,
                    request_deserializer=x__pb2.LikeMessageRequest.FromString,
                    response_serializer=x__pb2.LikeMessageResponse.SerializeToString,
            ),
            'CommentMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.CommentMessage,
                    request_deserializer=x__pb2.CommentMessageRequest.FromString,
                    response_serializer=x__pb2.CommentMessageResponse.SerializeToString,
            ),
            'FollowUser': grpc.unary_unary_rpc_method_handler(
                    servicer.FollowUser,
                    request_deserializer=x__pb2.FollowUserRequest.FromString,
                    response_serializer=x__pb2.FollowUserResponse.SerializeToString,
            ),
            'GetUserId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserId,
                    request_deserializer=x__pb2.GetUserIdRequest.FromString,
                    response_serializer=x__pb2.GetUserIdResponse.SerializeToString,
            ),
            'EditMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.EditMessage,
                    request_deserializer=x__pb2.EditMessageRequest.FromString,
                    response_serializer=x__pb2.EditMessageResponse.SerializeToString,
            ),
            'DeleteMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMessage,
                    request_deserializer=x__pb2.DeleteMessageRequest.FromString,
                    response_serializer=x__pb2.DeleteMessageResponse.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=x__pb2.DeleteAccountRequest.FromString,
                    response_serializer=x__pb2.DeleteAccountResponse.SerializeToString,
            ),
            'ChangePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangePassword,
                    request_deserializer=x__pb2.ChangePasswordRequest.FromString,
                    response_serializer=x__pb2.ChangePasswordResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'x.XService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class XService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/x.XService/RegisterUser',
            x__pb2.RegisterUserRequest.SerializeToString,
            x__pb2.RegisterUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoginUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/x.XService/LoginUser',
            x__pb2.LoginUserRequest.SerializeToString,
            x__pb2.LoginUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/x.XService/SendMessage',
            x__pb2.SendMessageRequest.SerializeToString,
            x__pb2.SendMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/x.XService/GetMessages',
            x__pb2.GetMessagesRequest.SerializeToString,
            x__pb2.GetMessagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLastMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/x.XService/GetLastMessages',
            x__pb2.LastMessagesRequest.SerializeToString,
            x__pb2.LastMessagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LikeMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/x.XService/LikeMessage',
            x__pb2.LikeMessageRequest.SerializeToString,
            x__pb2.LikeMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CommentMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/x.XService/CommentMessage',
            x__pb2.CommentMessageRequest.SerializeToString,
            x__pb2.CommentMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FollowUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/x.XService/FollowUser',
            x__pb2.FollowUserRequest.SerializeToString,
            x__pb2.FollowUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/x.XService/GetUserId',
            x__pb2.GetUserIdRequest.SerializeToString,
            x__pb2.GetUserIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EditMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/x.XService/EditMessage',
            x__pb2.EditMessageRequest.SerializeToString,
            x__pb2.EditMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/x.XService/DeleteMessage',
            x__pb2.DeleteMessageRequest.SerializeToString,
            x__pb2.DeleteMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/x.XService/DeleteAccount',
            x__pb2.DeleteAccountRequest.SerializeToString,
            x__pb2.DeleteAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/x.XService/ChangePassword',
            x__pb2.ChangePasswordRequest.SerializeToString,
            x__pb2.ChangePasswordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
